# Complete Infrastructure-as-Code CI/CD Pipeline for Azure Static Web Apps
name: Full Infrastructure Deploy

on:
  workflow_dispatch: # Manual trigger for new site setup
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: ["main"]

# No environment variables needed - all configuration read from environments.json

jobs:
  # Complete infrastructure and deployment job
  full_infrastructure_deploy:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Complete Infrastructure and Deploy Job
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Setup Azure Developer CLI (Optional)
        id: setup_azd
        continue-on-error: true
        run: |
          echo "🔧 Azure Developer CLI setup disabled for reliable CI/CD..."
          echo "� Using Azure CLI and Bicep for deployment instead"
          echo "azd_available=false" >> $GITHUB_OUTPUT

      - name: Read and Validate Configuration
        id: config_validation
        run: |
          echo "📋 Reading configuration from environments.json..."
          
          # Validate configuration file exists
          if [ ! -f "config/environments.json" ]; then
            echo "❌ Configuration file not found: config/environments.json"
            exit 1
          fi
          
          # Extract configuration values
          RESOURCE_GROUP=$(jq -r '.environments.prod.azure.resourceGroup // "jyothi-resume-RG"' config/environments.json)
          STATIC_WEB_APP=$(jq -r '.environments.prod.azure.staticWebAppName // "jyothi-resume-WebApp"' config/environments.json)
          LOCATION=$(jq -r '.environments.prod.azure.location // "eastasia"' config/environments.json)
          
          # Extract Azure identity configuration
          AZURE_CLIENT_ID=$(jq -r '.environments.prod.azure.auth.clientId // ""' config/environments.json)
          AZURE_TENANT_ID=$(jq -r '.environments.prod.azure.auth.tenantId // ""' config/environments.json)
          AZURE_SUBSCRIPTION_ID=$(jq -r '.environments.prod.azure.auth.subscriptionId // ""' config/environments.json)
          
          # Extract custom domain configuration
          CUSTOM_DOMAIN_ENABLED=$(jq -r '.environments.prod.azure.customDomain.enabled // false' config/environments.json)
          CUSTOM_DOMAIN_REQUIRED=$(jq -r '.environments.prod.azure.customDomain.required // false' config/environments.json)
          FRIENDLY_NAME=$(jq -r '.environments.prod.azure.customDomain.friendlyName // "jyothiventrapragada"' config/environments.json)
          FULL_DOMAIN=$(jq -r '.environments.prod.azure.customDomain.fullDomain // ""' config/environments.json)
          DOMAIN_TYPE=$(jq -r '.environments.prod.azure.customDomain.domainType // "external"' config/environments.json)
          
          # Validate required configuration
          if [ "$RESOURCE_GROUP" = "null" ] || [ "$STATIC_WEB_APP" = "null" ]; then
            echo "❌ Missing required configuration in environments.json"
            exit 1
          fi
          
          # Check if OIDC configuration is available
          USE_INTERACTIVE_LOGIN="false"
          if [ "$AZURE_CLIENT_ID" = "" ] || [ "$AZURE_CLIENT_ID" = "null" ] || 
             [ "$AZURE_TENANT_ID" = "" ] || [ "$AZURE_TENANT_ID" = "null" ] || 
             [ "$AZURE_SUBSCRIPTION_ID" = "" ] || [ "$AZURE_SUBSCRIPTION_ID" = "null" ]; then
            echo "⚠️ OIDC configuration not found in environments.json"
            echo "🔐 Will use interactive Azure CLI login instead"
            USE_INTERACTIVE_LOGIN="true"
          else
            echo "✅ OIDC configuration found - using federated identity"
          fi
          
          # Validate custom domain if required
          if [ "$CUSTOM_DOMAIN_REQUIRED" = "true" ]; then
            if [ "$FULL_DOMAIN" = "" ] || [ "$FULL_DOMAIN" = "null" ]; then
              echo "❌ Custom domain is required but not configured in environments.json"
              echo "📋 Please configure environments.prod.azure.customDomain.fullDomain"
              echo "💡 Example: yourname.com or resume.yourname.com"
              exit 1
            fi
            
            # Validate domain format
            if ! echo "$FULL_DOMAIN" | grep -E '^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]\.[a-z]{2,}$'; then
              echo "❌ Invalid domain format: $FULL_DOMAIN"
              echo "💡 Domain must be like: yourname.com or subdomain.yourname.com"
              exit 1
            fi
          fi
          
          echo "✅ Configuration validated:"
          echo "   Resource Group: $RESOURCE_GROUP"
          echo "   Static Web App: $STATIC_WEB_APP"
          echo "   Location: $LOCATION"
          echo "   Authentication: $([ "$USE_INTERACTIVE_LOGIN" = "true" ] && echo "Interactive CLI" || echo "OIDC Federated")"
          if [ "$USE_INTERACTIVE_LOGIN" = "false" ]; then
            echo "   Azure Client ID: $AZURE_CLIENT_ID"
            echo "   Azure Tenant ID: $AZURE_TENANT_ID"
            echo "   Azure Subscription ID: $AZURE_SUBSCRIPTION_ID"
          fi
          echo "   Custom Domain: $CUSTOM_DOMAIN_ENABLED"
          if [ "$CUSTOM_DOMAIN_ENABLED" = "true" ]; then
            echo "   Domain: $FULL_DOMAIN ($DOMAIN_TYPE)"
          fi
          
          # Set outputs for later steps
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "static_web_app=$STATIC_WEB_APP" >> $GITHUB_OUTPUT
          echo "location=$LOCATION" >> $GITHUB_OUTPUT
          echo "use_interactive_login=$USE_INTERACTIVE_LOGIN" >> $GITHUB_OUTPUT
          echo "azure_client_id=$AZURE_CLIENT_ID" >> $GITHUB_OUTPUT
          echo "azure_tenant_id=$AZURE_TENANT_ID" >> $GITHUB_OUTPUT
          echo "azure_subscription_id=$AZURE_SUBSCRIPTION_ID" >> $GITHUB_OUTPUT
          echo "custom_domain_enabled=$CUSTOM_DOMAIN_ENABLED" >> $GITHUB_OUTPUT
          echo "friendly_name=$FRIENDLY_NAME" >> $GITHUB_OUTPUT
          echo "full_domain=$FULL_DOMAIN" >> $GITHUB_OUTPUT
          echo "domain_type=$DOMAIN_TYPE" >> $GITHUB_OUTPUT

      - name: Azure Login (OIDC)
        if: steps.config_validation.outputs.use_interactive_login != 'true'
        uses: azure/login@v1
        with:
          client-id: ${{ steps.config_validation.outputs.azure_client_id }}
          tenant-id: ${{ steps.config_validation.outputs.azure_tenant_id }}
          subscription-id: ${{ steps.config_validation.outputs.azure_subscription_id }}

      - name: Azure Login (Interactive)
        if: steps.config_validation.outputs.use_interactive_login == 'true'
        run: |
          echo "🔐 Interactive Azure login required"
          echo "📋 Please run 'az login' locally and set up OIDC federated identity for automatic authentication"
          echo "💡 For now, using Azure CLI with default credentials"
          az login --use-device-code

      - name: Azure CLI Setup
        run: |
          az --version
          az account show
          echo "🔧 Using Azure CLI and Bicep for reliable CI/CD deployment"

      - name: Check Existing Azure Resources
        id: check_resources
        run: |
          echo "🔍 Validating existing Azure resources..."
          
          RESOURCE_GROUP="${{ steps.config_validation.outputs.resource_group }}"
          STATIC_WEB_APP="${{ steps.config_validation.outputs.static_web_app }}"
          LOCATION="${{ steps.config_validation.outputs.location }}"
          
          # Check if resource group exists
          RG_EXISTS=$(az group exists --name $RESOURCE_GROUP)
          echo "Resource Group ($RESOURCE_GROUP) exists: $RG_EXISTS"
          
          # Initialize change flags
          RESOURCE_CHANGED="false"
          DEPLOYMENT_NEEDED="false"
          
          if [ "$RG_EXISTS" = "true" ]; then
            # Check if Static Web App exists
            SWA_EXISTS=$(az staticwebapp list --resource-group $RESOURCE_GROUP --query "[?name=='$STATIC_WEB_APP'].name" --output tsv)
            
            if [ -n "$SWA_EXISTS" ]; then
              echo "✅ Static Web App found: $STATIC_WEB_APP"
              
              # Check for configuration drift (location, SKU, etc.)
              CURRENT_LOCATION=$(az staticwebapp show --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --query "location" --output tsv)
              
              if [ "$CURRENT_LOCATION" != "$LOCATION" ]; then
                echo "⚠️ Configuration drift detected - Location changed: $CURRENT_LOCATION -> $LOCATION"
                RESOURCE_CHANGED="true"
              else
                echo "✅ Resource configuration matches desired state"
              fi
              
              echo "skip_provisioning=true" >> $GITHUB_OUTPUT
              echo "resource_exists=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Static Web App not found, provisioning required"
              DEPLOYMENT_NEEDED="true"
              echo "skip_provisioning=false" >> $GITHUB_OUTPUT
              echo "resource_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Resource Group not found, full provisioning required"
            DEPLOYMENT_NEEDED="true"
            echo "skip_provisioning=false" >> $GITHUB_OUTPUT
            echo "resource_exists=false" >> $GITHUB_OUTPUT
          fi
          
          # Set deployment strategy outputs
          echo "resource_changed=$RESOURCE_CHANGED" >> $GITHUB_OUTPUT
          echo "deployment_needed=$DEPLOYMENT_NEEDED" >> $GITHUB_OUTPUT
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "static_web_app=$STATIC_WEB_APP" >> $GITHUB_OUTPUT

      - name: Deploy Azure Resources (If Changed/Missing)
        if: steps.check_resources.outputs.skip_provisioning != 'true' || steps.check_resources.outputs.resource_changed == 'true'
        run: |
          if [ "${{ steps.check_resources.outputs.resource_changed }}" = "true" ]; then
            echo "🔄 Deploying resource changes due to configuration drift..."
          else
            echo "🏗️ Provisioning new Azure infrastructure..."
          fi
          
          RESOURCE_GROUP="${{ steps.check_resources.outputs.resource_group }}"
          STATIC_WEB_APP="${{ steps.config_validation.outputs.static_web_app }}"
          LOCATION="${{ steps.config_validation.outputs.location }}"
          
          # Use Azure CLI and Bicep for reliable CI/CD deployment
          echo "📦 Using Azure CLI and Bicep for deployment..."
          
          # Always ensure resource group exists first
          echo "🏗️ Ensuring resource group exists: $RESOURCE_GROUP"
          echo "🔍 Current subscription and account info:"
          az account show --query "{subscriptionId:id, tenantId:tenantId, name:name}" --output table
          
          # Check current resource groups
          echo "🔍 Checking existing resource groups..."
          RG_EXISTS=$(az group exists --name $RESOURCE_GROUP)
          echo "Resource group '$RESOURCE_GROUP' exists: $RG_EXISTS"
          
          if [ "$RG_EXISTS" != "true" ]; then
            echo "🏗️ Creating resource group: $RESOURCE_GROUP in location: $LOCATION"
            az group create --name $RESOURCE_GROUP --location $LOCATION --output table
            
            if [ $? -eq 0 ]; then
              echo "✅ Resource group creation command completed"
              # Wait a moment for Azure to propagate
              sleep 5
              
              # Verify creation
              RG_EXISTS_AFTER=$(az group exists --name $RESOURCE_GROUP)
              if [ "$RG_EXISTS_AFTER" = "true" ]; then
                echo "✅ Resource group verified after creation"
              else
                echo "❌ Resource group verification failed after creation"
                echo "🔍 Listing all resource groups:"
                az group list --query "[].{Name:name, Location:location}" --output table
                exit 1
              fi
            else
              echo "❌ Failed to create resource group"
              exit 1
            fi
          else
            echo "✅ Resource group already exists"
          fi
          
          # Deploy using Bicep
          echo "🚀 Deploying Static Web App using Bicep..."
          echo "Parameters:"
          echo "  - Resource Group: $RESOURCE_GROUP"
          echo "  - Static Web App: $STATIC_WEB_APP"
          echo "  - Location: $LOCATION"
          echo "  - Environment: prod"
          
          az deployment group create \
            --resource-group $RESOURCE_GROUP \
            --template-file infra/main.bicep \
            --parameters \
              environmentName="prod" \
              location="$LOCATION" \
              staticWebAppName="$STATIC_WEB_APP" \
            --verbose
        env:
          AZURE_ENV_NAME: prod
          AZURE_LOCATION: ${{ steps.config_validation.outputs.location }}

      - name: Skip Resource Deployment
        if: steps.check_resources.outputs.skip_provisioning == 'true' && steps.check_resources.outputs.resource_changed != 'true'
        run: |
          echo "⏭️ Skipping resource deployment - no changes detected"
          echo "✅ Resource Group: ${{ steps.check_resources.outputs.resource_group }}"
          echo "✅ Static Web App: ${{ steps.check_resources.outputs.static_web_app }}"
          echo "📋 Configuration matches desired state"

      - name: Get Static Web App API Token (For Existing Infrastructure)
        if: steps.check_resources.outputs.skip_provisioning == 'true' && steps.check_resources.outputs.resource_changed != 'true'
        id: get_existing_api_token
        run: |
          echo "🔑 Retrieving Static Web App API token for existing infrastructure..."
          
          RESOURCE_GROUP="${{ steps.check_resources.outputs.resource_group }}"
          STATIC_WEB_APP="${{ steps.config_validation.outputs.static_web_app }}"
          
          # Get the API token from the existing Static Web App
          API_TOKEN=$(az staticwebapp secrets list --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --query "properties.apiKey" --output tsv)
          
          if [ -n "$API_TOKEN" ] && [ "$API_TOKEN" != "null" ]; then
            echo "✅ API token retrieved successfully"
            echo "api_token=$API_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not retrieve API token"
            echo "api_token=" >> $GITHUB_OUTPUT
          fi

      - name: Detect Content Changes
        id: content_changes
        run: |
          echo "🔍 Detecting content changes..."
          
          # Check if this is a content-only change
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          CONTENT_CHANGED="false"
          INFRASTRUCTURE_CHANGED="false"
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "📂 Changed files:"
            echo "$CHANGED_FILES"
            
            # Check for content changes (website source code and config)
            if echo "$CHANGED_FILES" | grep -E '^src/|^config/environments\.json$'; then
              CONTENT_CHANGED="true"
              echo "✅ Content changes detected"
            fi
            
            # Check for infrastructure changes
            if echo "$CHANGED_FILES" | grep -E '^infra/|^azure\.yaml$|^\.github/workflows/full-infrastructure-deploy\.yml$'; then
              INFRASTRUCTURE_CHANGED="true"
              echo "✅ Infrastructure changes detected"
            fi
            
            # Check for documentation-only changes (skip deployment)
            # Define what counts as documentation files
            DOC_FILES=$(echo "$CHANGED_FILES" | grep -E '^docs/.*\.md$|^README\.md$|^.*\.md$|^DOCUMENTATION.*\.md$|^LICENSE$|^\.gitignore$|^\.vscode/')
            NON_DOC_FILES=$(echo "$CHANGED_FILES" | grep -v -E '^docs/.*\.md$|^README\.md$|^.*\.md$|^DOCUMENTATION.*\.md$|^LICENSE$|^\.gitignore$|^\.vscode/')
            
            if [ -z "$NON_DOC_FILES" ] && [ -n "$DOC_FILES" ]; then
              echo "📚 Documentation-only changes detected:"
              echo "$DOC_FILES" | head -10
              echo "🚫 Skipping deployment - no infrastructure or content changes"
              CONTENT_CHANGED="false"
              INFRASTRUCTURE_CHANGED="false"
              echo "skip_deployment=true" >> $GITHUB_OUTPUT
            else
              echo "skip_deployment=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ No file changes detected (manual trigger or first commit)"
            CONTENT_CHANGED="true" # Default to content deployment
          fi
          
          echo "content_changed=$CONTENT_CHANGED" >> $GITHUB_OUTPUT
          echo "infrastructure_changed=$INFRASTRUCTURE_CHANGED" >> $GITHUB_OUTPUT

      - name: Skip Deployment for Documentation-Only Changes
        if: steps.content_changes.outputs.skip_deployment == 'true'
        run: |
          echo "📚 Documentation-only changes detected:"
          echo "   Changed files are only documentation, README, or configuration files"
          echo "   No deployment needed - infrastructure and content remain unchanged"
          echo ""
          echo "✅ Workflow completed successfully without deployment"
          echo "💡 Next push with src/ or infra/ changes will trigger deployment"

      - name: Deploy Content (New Infrastructure)
        if: (steps.check_resources.outputs.skip_provisioning != 'true' || steps.check_resources.outputs.resource_changed == 'true') && steps.content_changes.outputs.skip_deployment != 'true'
        run: |
          RESOURCE_GROUP="${{ steps.check_resources.outputs.resource_group }}"
          STATIC_WEB_APP="${{ steps.config_validation.outputs.static_web_app }}"
          
          echo "📦 Deploying content via Azure CLI..."
          
          # Get the API token for deployment
          API_TOKEN=$(az staticwebapp secrets list --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --query "properties.apiKey" --output tsv)
          
          if [ -n "$API_TOKEN" ] && [ "$API_TOKEN" != "null" ]; then
            echo "✅ API token retrieved successfully"
            echo "api_token=$API_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not retrieve API token for content deployment"
            echo "📋 Static Web App created successfully, please deploy content manually"
          fi
        id: new_infrastructure_token

      - name: Deploy Content to New Infrastructure (Using Static Web Apps Action)
        if: (steps.check_resources.outputs.skip_provisioning != 'true' || steps.check_resources.outputs.resource_changed == 'true') && steps.new_infrastructure_token.outputs.api_token != '' && steps.content_changes.outputs.skip_deployment != 'true'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.new_infrastructure_token.outputs.api_token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/src"
          api_location: ""
          output_location: ""

      - name: Get Static Web App API Token (For Future Deployments)
        if: steps.check_resources.outputs.skip_provisioning != 'true' || steps.check_resources.outputs.resource_changed == 'true'
        id: get_api_token
        run: |
          echo "🔑 Retrieving Static Web App API token..."
          
          RESOURCE_GROUP="${{ steps.check_resources.outputs.resource_group }}"
          STATIC_WEB_APP="${{ steps.config_validation.outputs.static_web_app }}"
          
          # Get the API token from the Static Web App
          API_TOKEN=$(az staticwebapp secrets list --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --query "properties.apiKey" --output tsv)
          
          if [ -n "$API_TOKEN" ] && [ "$API_TOKEN" != "null" ]; then
            echo "✅ API token retrieved successfully"
            echo "💡 You can add this as AZURE_STATIC_WEB_APPS_API_TOKEN secret for future content-only deployments:"
            echo "    Token: $API_TOKEN"
            echo "api_token=$API_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not retrieve API token"
          fi

      - name: Deploy Content Only (Existing Infrastructure)
        if: steps.check_resources.outputs.skip_provisioning == 'true' && steps.check_resources.outputs.resource_changed != 'true' && steps.content_changes.outputs.content_changed == 'true' && steps.content_changes.outputs.skip_deployment != 'true'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN || steps.get_existing_api_token.outputs.api_token || steps.get_api_token.outputs.api_token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/src"
          api_location: ""
          output_location: ""

      - name: Skip Content Deployment
        if: steps.content_changes.outputs.content_changed != 'true' && steps.check_resources.outputs.skip_provisioning == 'true'
        run: |
          echo "⏭️ Skipping content deployment - no content changes detected"
          echo "📋 Only infrastructure or workflow changes found"

      - name: Configure Custom Domain
        if: steps.config_validation.outputs.custom_domain_enabled == 'true'
        run: |
          echo "🌐 Configuring custom domain..."
          
          RESOURCE_GROUP="${{ steps.check_resources.outputs.resource_group }}"
          STATIC_WEB_APP="${{ steps.config_validation.outputs.static_web_app }}"
          FULL_DOMAIN="${{ steps.config_validation.outputs.full_domain }}"
          DOMAIN_TYPE="${{ steps.config_validation.outputs.domain_type }}"
          
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Static Web App: $STATIC_WEB_APP"
          echo "Custom Domain: $FULL_DOMAIN"
          echo "Domain Type: $DOMAIN_TYPE"
          
          # Verify Static Web App exists
          SWA_EXISTS=$(az staticwebapp list --resource-group $RESOURCE_GROUP --query "[?name=='$STATIC_WEB_APP'].name" --output tsv)
          
          if [ -z "$SWA_EXISTS" ]; then
            echo "❌ Static Web App not found: $STATIC_WEB_APP"
            echo "ℹ️ Custom domain will be configured after infrastructure deployment"
          else
            # Check if custom domain already exists
            EXISTING_DOMAIN=$(az staticwebapp hostname list --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --query "[?name=='$FULL_DOMAIN'].name" --output tsv 2>/dev/null || echo "")
            
            if [ -z "$EXISTING_DOMAIN" ]; then
              echo "🔧 Adding custom domain: $FULL_DOMAIN"
              
              # Check if this is an apex domain (no subdomain)
              if [[ "$FULL_DOMAIN" == *.*.* ]]; then
                # Has subdomain, use default CNAME validation
                echo "📋 Subdomain detected - using CNAME validation"
                az staticwebapp hostname set --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --hostname $FULL_DOMAIN --no-wait
              else
                # Apex domain, use DNS TXT validation
                echo "📋 Apex domain detected - using DNS TXT validation"
                az staticwebapp hostname set --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --hostname $FULL_DOMAIN --validation-method dns-txt-token --no-wait
              fi
              
              if [ $? -eq 0 ]; then
                echo "✅ Custom domain configuration initiated successfully"
                echo "📋 DNS configuration required:"
                DEFAULT_HOSTNAME=$(az staticwebapp show --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --query "defaultHostname" --output tsv)
                
                if [[ "$FULL_DOMAIN" == *.*.* ]]; then
                  echo "    CNAME Record: $FULL_DOMAIN -> $DEFAULT_HOSTNAME"
                else
                  echo "    For apex domain $FULL_DOMAIN:"
                  echo "    1. Get TXT validation token: az staticwebapp hostname show -n $STATIC_WEB_APP -g $RESOURCE_GROUP --hostname $FULL_DOMAIN --query 'validationToken'"
                  echo "    2. Add TXT record: @ -> [validation-token-from-step-1]"
                  echo "    3. Add A record: @ -> $(dig +short $DEFAULT_HOSTNAME | head -1 2>/dev/null || echo '[IP-from-Azure-Portal]')"
                fi
                echo "⏰ Domain validation will complete automatically once DNS records are configured"
              else
                echo "⚠️ Custom domain configuration failed"
                echo "💡 You can configure this manually in Azure Portal later"
              fi
            else
              echo "✅ Custom domain already exists: $FULL_DOMAIN"
            fi
          fi

      - name: Get DNS Configuration Details
        if: steps.config_validation.outputs.custom_domain_enabled == 'true'
        id: dns_config
        run: |
          echo "📋 Retrieving DNS configuration details..."
          
          RESOURCE_GROUP="${{ steps.check_resources.outputs.resource_group }}"
          STATIC_WEB_APP="${{ steps.config_validation.outputs.static_web_app }}"
          FULL_DOMAIN="${{ steps.config_validation.outputs.full_domain }}"
          
          # Verify Static Web App exists
          SWA_EXISTS=$(az staticwebapp list --resource-group $RESOURCE_GROUP --query "[?name=='$STATIC_WEB_APP'].name" --output tsv)
          
          if [ -n "$SWA_EXISTS" ]; then
            # Get the default hostname for A record
            DEFAULT_HOSTNAME=$(az staticwebapp show --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --query "defaultHostname" --output tsv)
            
            # Try to get the validation token (may not be available immediately)
            VALIDATION_TOKEN=$(az staticwebapp hostname show --name $STATIC_WEB_APP --resource-group $RESOURCE_GROUP --hostname $FULL_DOMAIN --query "validationToken" --output tsv 2>/dev/null || echo "")
            
            # Get IP address for A record
            IP_ADDRESS=$(nslookup $DEFAULT_HOSTNAME | grep -A1 "Non-authoritative answer:" | grep "Address:" | tail -1 | awk '{print $2}' 2>/dev/null || echo "")
            
            echo "🌐 DNS Configuration Required for: $FULL_DOMAIN"
            echo "=================================="
            
            if [[ "$FULL_DOMAIN" == *.*.* ]]; then
              # Subdomain - CNAME record
              echo "📝 DNS Record Type: CNAME (Subdomain)"
              echo "Record Configuration:"
              echo "  Type: CNAME"
              echo "  Name: $(echo $FULL_DOMAIN | cut -d'.' -f1)"
              echo "  Value: $DEFAULT_HOSTNAME"
              echo "  TTL: 3600"
            else
              # Apex domain - TXT + A records
              echo "📝 DNS Record Type: TXT + A (Apex Domain)"
              echo "Record Configuration:"
              echo ""
              echo "1. TXT Record (Domain Validation):"
              echo "   Type: TXT"
              echo "   Name: @ (or leave blank)"
              if [ -n "$VALIDATION_TOKEN" ] && [ "$VALIDATION_TOKEN" != "null" ]; then
                echo "   Value: $VALIDATION_TOKEN"
              else
                echo "   Value: [Run: az staticwebapp hostname show -n $STATIC_WEB_APP -g $RESOURCE_GROUP --hostname $FULL_DOMAIN --query 'validationToken']"
              fi
              echo "   TTL: 3600"
              echo ""
              echo "2. A Record (Domain Routing):"
              echo "   Type: A"
              echo "   Name: @ (or leave blank)"
              if [ -n "$IP_ADDRESS" ]; then
                echo "   Value: $IP_ADDRESS"
              else
                echo "   Value: [Get IP from: nslookup $DEFAULT_HOSTNAME]"
              fi
              echo "   TTL: 3600"
            fi
            
            echo ""
            echo "⏰ Timeline:"
            echo "  - DNS Propagation: 1-12 hours"
            echo "  - Azure Validation: Automatic after DNS propagation"
            echo "  - SSL Certificate: Automatic after validation"
            
            echo ""
            echo "🔍 Verification Commands:"
            if [[ "$FULL_DOMAIN" == *.*.* ]]; then
              echo "  nslookup $FULL_DOMAIN"
            else
              echo "  nslookup -type=TXT $FULL_DOMAIN"
              echo "  nslookup $FULL_DOMAIN"
            fi
            
            # Set outputs for the final summary
            echo "default_hostname=$DEFAULT_HOSTNAME" >> $GITHUB_OUTPUT
            echo "validation_token=$VALIDATION_TOKEN" >> $GITHUB_OUTPUT
            echo "ip_address=$IP_ADDRESS" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Static Web App not found - DNS configuration will be available after deployment"
          fi

      - name: Skip Custom Domain Configuration
        if: steps.config_validation.outputs.custom_domain_enabled != 'true'
        run: |
          echo "⏭️ Skipping custom domain configuration - disabled in config"

      - name: Output Deployment Information
        run: |
          echo "🎉 Deployment completed!"
          echo ""
          if [ "${{ steps.check_resources.outputs.skip_provisioning }}" = "true" ]; then
            echo "📊 Content-Only Deployment Summary:"
            echo "├── ⏭️ Infrastructure: Skipped (already exists)"
            echo "├── 📦 Content: Updated"
            echo "├── Resource Group: ${{ steps.check_resources.outputs.resource_group }}"
            echo "├── Static Web App: ${{ steps.check_resources.outputs.static_web_app }}"
          else
            echo "📊 Full Infrastructure Deployment Summary:"
            echo "├── 🏗️ Infrastructure: Provisioned"
            echo "├── 📦 Content: Deployed"
            echo "├── Resource Group: ${{ secrets.AZURE_RESOURCE_GROUP_NAME || 'jyothi-resume-RG' }}"
            echo "├── Static Web App: ${{ secrets.AZURE_STATIC_WEB_APP_NAME || 'jyothi-resume-WebApp' }}"
          fi
          echo "├── Custom Domain: ${{ steps.config_validation.outputs.custom_domain_enabled == 'true' && steps.config_validation.outputs.full_domain || 'https://calm-island-03caddd00.1.azurestaticapps.net' }}"
          echo "└── Status: Live and Ready"
          echo ""
          echo "🌐 Access your resume at:"
          echo "   https://calm-island-03caddd00.1.azurestaticapps.net"
          if [ "${{ steps.config_validation.outputs.custom_domain_enabled }}" = "true" ]; then
            echo "   Custom Domain: ${{ steps.config_validation.outputs.full_domain }} (after DNS configuration)"
            echo ""
            echo "📋 DNS Configuration Required:"
            FULL_DOMAIN="${{ steps.config_validation.outputs.full_domain }}"
            if [[ "$FULL_DOMAIN" == *.*.* ]]; then
              echo "   Record Type: CNAME"
              echo "   Host: $(echo $FULL_DOMAIN | cut -d'.' -f1)"
              echo "   Target: ${{ steps.dns_config.outputs.default_hostname || 'mango-sky-0e8ef2000.2.azurestaticapps.net' }}"
            else
              echo "   Record Type: TXT + A (Apex Domain)"
              echo "   TXT Record: @ -> ${{ steps.dns_config.outputs.validation_token || '[Get token from Azure Portal]' }}"
              echo "   A Record: @ -> ${{ steps.dns_config.outputs.ip_address || '[Get IP from nslookup]' }}"
            fi
            echo "   💡 Complete DNS setup within 12 hours for domain activation"
          fi

  # Close pull request job
  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
